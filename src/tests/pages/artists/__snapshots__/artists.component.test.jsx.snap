// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`HomePage Component should render my component 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <div
    className="shop-page"
  >
    <React.Fragment>
      <SearchBar
        search={[Function]}
      />
      <CollectionPreview
        data={Array []}
      />
    </React.Fragment>
  </div>,
  "nodes": Array [
    <div
      className="shop-page"
    >
      <React.Fragment>
        <SearchBar
          search={[Function]}
        />
        <CollectionPreview
          data={Array []}
        />
      </React.Fragment>
    </div>,
  ],
  "options": Object {},
  "renderer": null,
  "root": ShallowWrapper {
    "complexSelector": ComplexSelector {
      "buildPredicate": [Function],
      "childrenOfNode": [Function],
      "findWhereUnwrapped": [Function],
    },
    "length": 1,
    "node": <div
      className="shop-page"
    >
      <React.Fragment>
        <SearchBar
          search={[Function]}
        />
        <CollectionPreview
          data={Array []}
        />
      </React.Fragment>
    </div>,
    "nodes": Array [
      <div
        className="shop-page"
      >
        <React.Fragment>
          <SearchBar
            search={[Function]}
          />
          <CollectionPreview
            data={Array []}
          />
        </React.Fragment>
      </div>,
    ],
    "options": Object {},
    "renderer": ReactShallowRenderer {
      "_context": Object {},
      "_didScheduleRenderPhaseUpdate": false,
      "_dispatcher": Object {
        "readContext": [Function],
        "useCallback": [Function],
        "useContext": [Function],
        "useDebugValue": [Function],
        "useDeferredValue": [Function],
        "useEffect": [Function],
        "useImperativeHandle": [Function],
        "useLayoutEffect": [Function],
        "useMemo": [Function],
        "useReducer": [Function],
        "useRef": [Function],
        "useResponder": [Function],
        "useState": [Function],
        "useTransition": [Function],
      },
      "_element": <Home />,
      "_firstWorkInProgressHook": Object {
        "memoizedState": Object {
          "artists": Array [],
          "errorMessage": null,
          "loading": false,
        },
        "next": null,
        "queue": Object {
          "dispatch": [Function],
          "first": null,
        },
      },
      "_forcedUpdate": false,
      "_instance": null,
      "_isReRender": false,
      "_newState": null,
      "_numberOfReRenders": 0,
      "_renderPhaseUpdates": null,
      "_rendered": <div
        className="shop-page"
      >
        <React.Fragment>
          <SearchBar
            search={[Function]}
          />
          <CollectionPreview
            data={Array []}
          />
        </React.Fragment>
      </div>,
      "_rendering": false,
      "_updater": Updater {
        "_callbacks": Array [],
        "_renderer": [Circular],
      },
      "_workInProgressHook": null,
      "getRenderOutput": [Function],
      "render": [Function],
    },
    "root": [Circular],
    "unrendered": <Home />,
  },
  "unrendered": null,
}
`;

exports[`Page Artists should render Artists component 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <div
    className="shop-page"
  >
    <React.Fragment>
      <SearchBar
        search={[Function]}
      />
      <CollectionPreview
        data={Array []}
      />
    </React.Fragment>
  </div>,
  "nodes": Array [
    <div
      className="shop-page"
    >
      <React.Fragment>
        <SearchBar
          search={[Function]}
        />
        <CollectionPreview
          data={Array []}
        />
      </React.Fragment>
    </div>,
  ],
  "options": Object {},
  "renderer": null,
  "root": ShallowWrapper {
    "complexSelector": ComplexSelector {
      "buildPredicate": [Function],
      "childrenOfNode": [Function],
      "findWhereUnwrapped": [Function],
    },
    "length": 1,
    "node": <div
      className="shop-page"
    >
      <React.Fragment>
        <SearchBar
          search={[Function]}
        />
        <CollectionPreview
          data={Array []}
        />
      </React.Fragment>
    </div>,
    "nodes": Array [
      <div
        className="shop-page"
      >
        <React.Fragment>
          <SearchBar
            search={[Function]}
          />
          <CollectionPreview
            data={Array []}
          />
        </React.Fragment>
      </div>,
    ],
    "options": Object {},
    "renderer": ReactShallowRenderer {
      "_context": Object {},
      "_didScheduleRenderPhaseUpdate": false,
      "_dispatcher": Object {
        "readContext": [Function],
        "useCallback": [Function],
        "useContext": [Function],
        "useDebugValue": [Function],
        "useDeferredValue": [Function],
        "useEffect": [Function],
        "useImperativeHandle": [Function],
        "useLayoutEffect": [Function],
        "useMemo": [Function],
        "useReducer": [Function],
        "useRef": [Function],
        "useResponder": [Function],
        "useState": [Function],
        "useTransition": [Function],
      },
      "_element": <Home />,
      "_firstWorkInProgressHook": Object {
        "memoizedState": Object {
          "artists": Array [],
          "errorMessage": null,
          "loading": false,
        },
        "next": null,
        "queue": Object {
          "dispatch": [Function],
          "first": null,
        },
      },
      "_forcedUpdate": false,
      "_instance": null,
      "_isReRender": false,
      "_newState": null,
      "_numberOfReRenders": 0,
      "_renderPhaseUpdates": null,
      "_rendered": <div
        className="shop-page"
      >
        <React.Fragment>
          <SearchBar
            search={[Function]}
          />
          <CollectionPreview
            data={Array []}
          />
        </React.Fragment>
      </div>,
      "_rendering": false,
      "_updater": Updater {
        "_callbacks": Array [],
        "_renderer": [Circular],
      },
      "_workInProgressHook": null,
      "getRenderOutput": [Function],
      "render": [Function],
    },
    "root": [Circular],
    "unrendered": <Home />,
  },
  "unrendered": null,
}
`;
